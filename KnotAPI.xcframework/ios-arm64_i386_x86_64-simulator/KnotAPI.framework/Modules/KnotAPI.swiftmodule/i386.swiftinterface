// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 effective-4.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name KnotAPI
import Foundation
@_exported import KnotAPI
import Swift
import UIKit
import WebKit
import _Concurrency
import os
@objc public protocol CardOnFileDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onSuccess(merchant: Swift.String)
  @objc func onError(error: Swift.String, message: Swift.String)
  @objc func onEvent(event: Swift.String, message: Swift.String)
  @objc func onExit()
  @objc func onFinished()
}
@objc public enum Environment : Swift.Int, Swift.RawRepresentable {
  case sandbox
  case production
  public typealias RawValue = Swift.String
  public var rawValue: KnotAPI.Environment.RawValue {
    get
  }
  public init?(rawValue: KnotAPI.Environment.RawValue)
}
@objc public class CardOnFileSwitcherSession : ObjectiveC.NSObject {
  @objc public init(sessionId: Swift.String, clientId: Swift.String, environment: KnotAPI.Environment)
  @objc public func setPrimaryColor(primaryColor: Swift.String)
  @objc public func setTextColor(textColor: Swift.String)
  @objc public func setCompanyName(companyName: Swift.String)
  @objc public func setDelegate(delegate: KnotAPI.CardOnFileDelegate)
  @objc public func openOnCardFileSwitcher(merchants: [Swift.Int])
  @objc public func openOnSubscriptionCanceler(merchants: [Swift.Int])
  @objc deinit
}
public typealias onSuccessHandler = (Swift.String) -> Swift.Void
public typealias onErrorHandler = (Swift.String, Swift.String) -> Swift.Void
public typealias onEventHandler = (Swift.String, Swift.String) -> Swift.Void
public typealias onExitHandler = () -> Swift.Void
public typealias finishedHandler = () -> Swift.Void
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CardOnFileSwitcherViewController : UIKit.UIViewController, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, clientId: Swift.String, merchants: [Swift.Int], primaryColor: Swift.String?, textColor: Swift.String?, companyName: Swift.String?, environment: KnotAPI.Environment, delegate: KnotAPI.CardOnFileDelegate?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KnotapiExceptionHandler {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SubscriptionCancelerViewController : UIKit.UIViewController, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, merchants: [Swift.Int], primaryColor: Swift.String?, textColor: Swift.String?, companyName: Swift.String?, delegate: KnotAPI.CardOnFileDelegate?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
extension KnotAPI.Environment : Swift.Equatable {}
extension KnotAPI.Environment : Swift.Hashable {}
