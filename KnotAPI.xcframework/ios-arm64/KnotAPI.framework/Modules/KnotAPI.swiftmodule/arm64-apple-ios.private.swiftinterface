// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KnotAPI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import ImageIO
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os
@objc @_inheritsConvenienceInitializers public class CardSwitcherConfiguration : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setOnSuccess(onSuccess: @escaping (_ merchant: Swift.String) -> Swift.Void)
  @objc public func setOnError(onError: @escaping (_ error: Swift.String, _ message: Swift.String) -> Swift.Void)
  @objc public func setOnEvent(onEvent: @escaping (_ error: Swift.String, _ message: Swift.String) -> Swift.Void)
  @objc public func setOnExit(onExit: @escaping () -> Swift.Void)
  @objc public func setOnFinished(onFinished: @escaping () -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CardOnFileSwitcherSession : KnotAPI.KnotProduct, KnotAPI.CardOnFileDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var vc: KnotAPI.KnotViewController? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, clientId: Swift.String, environment: KnotAPI.Environment)
  @objc @_Concurrency.MainActor(unsafe) public func setPrimaryColor(primaryColor: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setTextColor(textColor: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setCompanyName(companyName: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonCorners(buttonCorners: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonFontSize(buttonFontSize: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonPaddings(buttonPaddings: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setConfiguration(config: KnotAPI.CardSwitcherConfiguration)
  @objc @_Concurrency.MainActor(unsafe) public func setMerchantIds(merchantIds: [Swift.Int])
  @objc @_Concurrency.MainActor(unsafe) public func setMerchantNames(merchantNames: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func openCardOnFileSwitcher()
  @objc @_Concurrency.MainActor(unsafe) public func openCardOnFileSwitcher(entryPoint: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onSuccess(merchant: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onError(error: Swift.String, message: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onEvent(event: Swift.String, message: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onExit()
  @_Concurrency.MainActor(unsafe) @objc public func onFinished()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KnotViewController : UIKit.UIViewController, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate, UIKit.UIWebViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, clientId: Swift.String, primaryColor: Swift.String?, textColor: Swift.String?, companyName: Swift.String?, buttonCorners: Foundation.NSNumber?, buttonFontSize: Foundation.NSNumber?, buttonPaddings: Foundation.NSNumber?, environment: KnotAPI.Environment, webUrl: Swift.String, userScript: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) public func handleEvents(message: WebKit.WKScriptMessage) throws
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) public func onClose()
  @objc deinit
}
@objc public protocol CardOnFileDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onSuccess(merchant: Swift.String)
  @objc func onError(error: Swift.String, message: Swift.String)
  @objc func onEvent(event: Swift.String, message: Swift.String)
  @objc func onExit()
  @objc func onFinished()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SubscriptionCancelerViewController : KnotAPI.KnotViewController {
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, clientId: Swift.String, merchantIds: [Swift.Int], merchantNames: [Swift.String], primaryColor: Swift.String?, textColor: Swift.String?, companyName: Swift.String?, buttonCorners: Foundation.NSNumber?, buttonFontSize: Foundation.NSNumber?, buttonPaddings: Foundation.NSNumber?, amount: Swift.Bool, delegate: KnotAPI.SubscriptionCancelerDelegate?, environment: KnotAPI.Environment, useCategories: Swift.Bool, useSelection: Swift.Bool, useSingleFlow: Swift.Bool, useSearch: Swift.Bool, logo: Swift.String)
  @_Concurrency.MainActor(unsafe) override public func handleEvents(message: WebKit.WKScriptMessage) throws
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KnotapiExceptionHandler {
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelIdentifier: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KnotProduct : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @objc @_Concurrency.MainActor(unsafe) public func setUseCategories(useCategories: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setUseSelection(useSelection: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setUseSingleFlow(useSingleFlow: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setUseSearch(useSearch: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setLogo(logo: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setOpenWithFullScreen(openWithFullScreen: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func presentViewController(_ vc: UIKit.UIViewController, openWithFullScreen: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) public static var version: Swift.String? {
    get
  }
  @objc deinit
}
@objc public protocol SubscriptionCancelerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onSuccess(merchant: Swift.String)
  @objc func onError(error: Swift.String, message: Swift.String)
  @objc func onEvent(event: Swift.String, message: Swift.String)
  @objc func onExit()
  @objc func onFinished()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SubscriptionCancelerSession : KnotAPI.KnotProduct, KnotAPI.SubscriptionCancelerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public init(sessionId: Swift.String, clientId: Swift.String, environment: KnotAPI.Environment)
  @objc @_Concurrency.MainActor(unsafe) public func setPrimaryColor(primaryColor: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setTextColor(textColor: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setCompanyName(companyName: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonCorners(buttonCorners: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonFontSize(buttonFontSize: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setButtonPaddings(buttonPaddings: Foundation.NSNumber)
  @objc @_Concurrency.MainActor(unsafe) public func setAmount(amount: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func setConfiguration(configuration: KnotAPI.SubscriptionCancelerConfiguration)
  @objc @_Concurrency.MainActor(unsafe) public func setMerchantIds(merchantIds: [Swift.Int])
  @objc @_Concurrency.MainActor(unsafe) public func setMerchantNames(merchantNames: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func openSubscriptionCanceler()
  @_Concurrency.MainActor(unsafe) @objc public func onSuccess(merchant: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onError(error: Swift.String, message: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onEvent(event: Swift.String, message: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func onExit()
  @_Concurrency.MainActor(unsafe) @objc public func onFinished()
  @objc deinit
}
@objc public enum Environment : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  case sandbox
  case production
  case development
  public typealias RawValue = Swift.String
  public var rawValue: KnotAPI.Environment.RawValue {
    get
  }
  public init?(rawValue: KnotAPI.Environment.RawValue)
  public typealias AllCases = [KnotAPI.Environment]
  public static var allCases: [KnotAPI.Environment] {
    get
  }
}
extension UIKit.UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
infix operator =~ : DefaultPrecedence
@objc @_inheritsConvenienceInitializers public class SubscriptionCancelerConfiguration : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setOnSuccess(onSuccess: @escaping (_ merchant: Swift.String) -> Swift.Void)
  @objc public func setOnError(onError: @escaping (_ error: Swift.String, _ message: Swift.String) -> Swift.Void)
  @objc public func setOnEvent(onEvent: @escaping (_ error: Swift.String, _ message: Swift.String) -> Swift.Void)
  @objc public func setOnExit(onExit: @escaping () -> Swift.Void)
  @objc public func setOnFinished(onFinished: @escaping () -> Swift.Void)
  @objc deinit
}
extension KnotAPI.Environment : Swift.Equatable {}
extension KnotAPI.Environment : Swift.Hashable {}
