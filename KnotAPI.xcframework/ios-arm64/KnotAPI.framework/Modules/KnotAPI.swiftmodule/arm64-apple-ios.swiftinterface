// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KnotAPI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import DeveloperToolsSupport
import Foundation
import Network
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class KnotSession : ObjectiveC.NSObject {
  @objc public var sessionId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var clientId: Swift.String
  @objc public var environment: KnotAPI.Environment
  @objc public var useCategories: Swift.Bool
  @objc public var useSelection: Swift.Bool
  @objc public var useSingleFlow: Swift.Bool
  @objc public var useSearch: Swift.Bool
  @objc public var openWithFullScreen: Swift.Bool
  @objc public var logo: Swift.String
  @objc public var primaryColor: Swift.String?
  @objc public var textColor: Swift.String?
  @objc public var companyName: Swift.String?
  @objc public var buttonCorners: Foundation.NSNumber?
  @objc public var buttonFontSize: Foundation.NSNumber?
  @objc public var buttonPaddings: Foundation.NSNumber?
  @objc public var merchantIds: [Swift.Int]?
  @objc public var merchantNames: [Swift.String]?
  @objc public var onSuccess: ((_ merchant: Swift.String) -> Swift.Void)?
  @objc public var onError: ((_ error: Swift.String, _ message: Swift.String) -> Swift.Void)?
  @objc public var onEvent: ((_ event: Swift.String, _ message: Swift.String, _ taskId: Swift.String?) -> Swift.Void)?
  @objc public var onExit: (() -> Swift.Void)?
  @objc public var onFinished: (() -> Swift.Void)?
  @objc public var entryPoint: Swift.String?
  @objc deinit
}
@objc public enum Product : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  case card_switcher
  case subscription_manager
  case transactions_link
  public typealias RawValue = Swift.String
  public var rawValue: KnotAPI.Product.RawValue {
    get
  }
  public init?(rawValue: KnotAPI.Product.RawValue)
  public typealias AllCases = [KnotAPI.Product]
  public static var allCases: [KnotAPI.Product] {
    get
  }
}
@_hasMissingDesignatedInitializers public class KnotapiExceptionHandler {
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelIdentifier: Swift.String {
    get
  }
}
@objc public enum Environment : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  case sandbox
  case production
  case development
  public typealias RawValue = Swift.String
  public var rawValue: KnotAPI.Environment.RawValue {
    get
  }
  public init?(rawValue: KnotAPI.Environment.RawValue)
  public typealias AllCases = [KnotAPI.Environment]
  public static var allCases: [KnotAPI.Environment] {
    get
  }
}
extension UIKit.UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
infix operator =~ : DefaultPrecedence
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Knot : ObjectiveC.NSObject {
  @objc public class func createCardSwitcherSession(id: Swift.String, clientId: Swift.String, environment: KnotAPI.Environment) -> KnotAPI.KnotSession
  @objc public class func createSubscriptionManagerSession(id: Swift.String, clientId: Swift.String, environment: KnotAPI.Environment) -> KnotAPI.KnotSession
  @objc public class func createViewController(session: KnotAPI.KnotSession) -> UIKit.UIViewController
  @objc public class func open(session: KnotAPI.KnotSession)
  @objc public class func SDKVersion() -> Swift.String?
  @objc deinit
}
extension KnotAPI.Product : Swift.Equatable {}
extension KnotAPI.Product : Swift.Hashable {}
extension KnotAPI.Environment : Swift.Equatable {}
extension KnotAPI.Environment : Swift.Hashable {}
